/*
 * JanelaSudoku.java
 *
 * Created on 17 de Junho de 2008, 20:04
 */
package gui;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import algvector_DEP.*;
import principal.IInterface;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Iterator;
import java.util.LinkedList;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;

/**
 *
 * @author  fernandes
 */
public class JanelaSudoku extends javax.swing.JFrame implements IInterface {

    private algvector_DEP.MetodoSeleccao metodoSeleccaoVector = null;
    private algmatriz.MetodoSeleccao metodoSeleccaoMatriz = null;
    private algvector_DEP.Recombinacao recombinacaoVector = null;
    private algmatriz.Recombinacao recombinacaoMatriz = null;
    private algvector_DEP.Mutacao mutacaoVector = null;
    private algmatriz.Mutacao mutacaoMatriz = null;
    private algmatriz.AlgoritmoGenetico agMatriz = null;
    algvector_DEP.AlgoritmoGenetico agVector = null;
    private StringBuffer sudokuStringBuffer = new StringBuffer();
    private Boolean isAlgoritmoMatriz = null;

    /** Creates new form JanelaSudoku */
    public JanelaSudoku() {
        initComponents();
        this.setTitle("SudokuSolver... or not!!!");
        preencherValoresPorOmissao();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        areaTextoSudoku = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        cxSeed = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cxTamanhoPopulacao = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cxMaximoGeracoes = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        comboBoxSeleccao = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        comboBoxRecombinacao = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cxNumIndividuos = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cxProbRecombinacao = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cxProbMutacao = new javax.swing.JTextField();
        botaoSubmit = new javax.swing.JButton();
        botaoSair = new javax.swing.JButton();
        botaoParar = new javax.swing.JButton();
        botaoAbrirFicheiro = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        cxNumeroGeração = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cxMelhorFitnessGeracao = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cxMelhorFitnessRun = new javax.swing.JTextField();
        comboBoxTipoIndividuo = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        comboBoxMutacao = new javax.swing.JComboBox();
        botaoExportar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        areaTextoSudoku.setColumns(11);
        areaTextoSudoku.setEditable(false);
        areaTextoSudoku.setFont(new java.awt.Font("DejaVu Sans", 0, 18));
        areaTextoSudoku.setRows(11);
        areaTextoSudoku.setToolTipText("Proposta de Problema");
        areaTextoSudoku.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jScrollPane1.setViewportView(areaTextoSudoku);

        jLabel1.setText("Seed");

        cxSeed.setToolTipText("Seed para gerar números aleatórios");

        jLabel2.setText("Tamanho População");

        cxTamanhoPopulacao.setToolTipText("Tamanho da população pretendido");

        jLabel3.setText("Máximo de Gerações");

        cxMaximoGeracoes.setToolTipText("Máximo de gerações pretendido");

        jLabel4.setText("Método de Selecção");

        comboBoxSeleccao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Torneio c/ Pop. Elite Matriz", "Torneio Simples Matriz", "Torneio Simples Com Batota", "Roleta Matriz" }));
        comboBoxSeleccao.setToolTipText("Método de selecção pretendido");
        comboBoxSeleccao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxSeleccaoActionPerformed(evt);
            }
        });

        jLabel5.setText("Método de Recombinação");

        comboBoxRecombinacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Um corte aleatorio", "Um corte em blocos de 3", "Um corte sem repetição", "Dois cortes", "Uniforme" }));
        comboBoxRecombinacao.setToolTipText("Método de recombinção pretendido");

        jLabel6.setText("Num de Individuos no torneio");

        cxNumIndividuos.setToolTipText("Número de Individuos que vão participar no Torneio");

        jLabel7.setText("Probabilidade da Recombinação");

        cxProbRecombinacao.setToolTipText("Probabilidade que a recombinação tem de ser efectuada");

        jLabel8.setText("Probabilidade da Mutação");

        cxProbMutacao.setToolTipText("Probabilidade com que a mutação é efectuada");

        botaoSubmit.setText("Resolver...");
        botaoSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSubmitActionPerformed(evt);
            }
        });

        botaoSair.setText("Sair");
        botaoSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSairActionPerformed(evt);
            }
        });

        botaoParar.setText("Parar");
        botaoParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPararActionPerformed(evt);
            }
        });

        botaoAbrirFicheiro.setText("Escolher Ficheiro");
        botaoAbrirFicheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAbrirFicheiroActionPerformed(evt);
            }
        });

        jLabel9.setText("Geração #:");

        cxNumeroGeração.setEditable(false);

        jLabel10.setText("Melhor Fitness da Geração:");

        cxMelhorFitnessGeracao.setEditable(false);

        jLabel11.setText("Melhor Fitness do Run:");

        cxMelhorFitnessRun.setEditable(false);

        comboBoxTipoIndividuo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Matriz 9x9", "Vector 81 posicões" }));
        comboBoxTipoIndividuo.setEnabled(false);
        comboBoxTipoIndividuo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTipoIndividuoActionPerformed(evt);
            }
        });

        jLabel13.setText("Tipo de Individuo");

        jLabel14.setText("Tipo de Mutação");

        comboBoxMutacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Numa linha troca 2 genes", "Aleatoria Matriz" }));

        botaoExportar.setText("Exportar");
        botaoExportar.setEnabled(false);
        botaoExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(cxNumIndividuos, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cxSeed, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cxTamanhoPopulacao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cxMaximoGeracoes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBoxSeleccao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cxProbRecombinacao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(comboBoxRecombinacao, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel14)
                                    .addComponent(comboBoxMutacao, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cxProbMutacao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(botaoExportar)
                                        .addComponent(jLabel8))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(botaoAbrirFicheiro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                        .addComponent(botaoSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoParar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoSair, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cxMelhorFitnessGeracao, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(cxMelhorFitnessRun, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(cxNumeroGeração, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
                .addGap(191, 191, 191))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboBoxTipoIndividuo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE))
                    .addComponent(jLabel13))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cxSeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cxTamanhoPopulacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cxProbRecombinacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxRecombinacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cxMaximoGeracoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxSeleccao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxMutacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cxProbMutacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cxNumIndividuos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxTipoIndividuo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(botaoExportar)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cxNumeroGeração, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxMelhorFitnessGeracao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cxMelhorFitnessRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoSubmit)
                    .addComponent(botaoParar)
                    .addComponent(botaoSair)
                    .addComponent(botaoAbrirFicheiro))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo chamado quando é alterado o valor da combobox que permite escolher o tipo de seleccao pretendida
     * @param evt Evento ActionPerformed
     */
	private void comboBoxSeleccaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxSeleccaoActionPerformed
	    cxNumIndividuos.setEnabled(((String) comboBoxSeleccao.getSelectedItem()).contains("Torneio") ? true : false);
	}//GEN-LAST:event_comboBoxSeleccaoActionPerformed

    /**
     * Metodo chamado quando é pressionado o botao que permite abrir uma caixa de dialogo 
     * para escolha do ficheiro .txt que contém o problema proposto.
     * @param Evento ActionPerformed.
     */
	private void botaoAbrirFicheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAbrirFicheiroActionPerformed
	
	    JFileChooser jfc = new JFileChooser();
	
	    jfc.setMultiSelectionEnabled(false);
	
	    try {
	        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
	
	            //preenche a sudokuStringBuffer com o conteudo do ficheiro, envia o objecto FILE
	            abrirFicheiro(jfc.getSelectedFile());
	
	            //mostra a proposta de resolucao
	            this.areaTextoSudoku.setText(sudokuStringBuffer.toString());
	
	        }
	    } catch (Exception ex) {
	        JOptionPane.showMessageDialog(this, ex.getMessage());
	    }
	
	}//GEN-LAST:event_botaoAbrirFicheiroActionPerformed

    /**
     * Metodo chamado quando é pressionado o botao que faz submeter a resolução do problema proposto.
     * @param evt Evento ActionPerformed.
     */
	private void botaoSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSubmitActionPerformed
    //se houver um problema indicado
		if (sudokuStringBuffer.toString().isEmpty()) {
			JOptionPane.showMessageDialog(this, " Indique um Sudoku para resolver!!!", "Erro de Inserção", JOptionPane.ERROR_MESSAGE);
			return;
		}
        try {
        	isAlgoritmoMatriz = comboBoxTipoIndividuo.getSelectedItem().toString().equals("Matriz 9x9");
            long seed = Long.parseLong(cxSeed.getText());
            int tamanhoPopulacao = Integer.parseInt(cxTamanhoPopulacao.getText());
            int maximoGeracoes = Integer.parseInt(cxMaximoGeracoes.getText());
            //String metodoDeSeleccao = (String) comboBoxSeleccao.getSelectedItem();
            int tamanhoTorneio = Integer.parseInt(cxNumIndividuos.getText());

            String metodoRecombinacao = comboBoxRecombinacao.getSelectedItem().toString();
            String metodoMutacao = comboBoxMutacao.getSelectedItem().toString();
            String metodoSeleccao = comboBoxSeleccao.getSelectedItem().toString();

            //metodoRecombinacao = metodoRecombinacao.compareTo("Um Corte") == 0 ? "RecombinacaoUmCorte" : metodoRecombinacao.compareTo("Dois Cortes") == 0 ? "RecombinacaoDoisCortes" : "RecombinacaoUniforme";

            double probabilidadeRecombinacao = Double.parseDouble(cxProbRecombinacao.getText());
            double probabilidadeMutacao = Double.parseDouble(cxProbMutacao.getText());

            //AQUI
            //metodoSeleccao = metodoSeleccao.compareTo("Roleta") == 0 ? new Roleta() : new TorneioComPopElite(numeroIndividuos);

            //recombinacao = metodoRecombinacao.compareTo("RecombinacaoUmCorte") == 0 ? new RecombinacaoUmCorteSemRepeticao(probabilidadeRecombinacao) : metodoRecombinacao.compareTo("RecombinacaoDoisCortes") == 0 ? new RecombinacaoDoisCortes(probabilidadeRecombinacao) : new RecombinacaoUniforme(probabilidadeRecombinacao);                       
            
            //METODO RECOMBINACAO
            switch (metodoRecombinacao) {
			case "Um corte aleatorio":
				recombinacaoMatriz = new algmatriz.RecombinacaoUmCorteAleatorio(probabilidadeRecombinacao);
				break;
			case "Um corte em blocos de 3":
				recombinacaoMatriz = new algmatriz.RecombinacaoUmCorteBoloco3(probabilidadeRecombinacao);
				break;
			//-->
			case "Um corte sem repetição":				
				if (isAlgoritmoMatriz) {
					recombinacaoMatriz = new algmatriz.RecombinacaoUmCorteSemRepeticao(probabilidadeRecombinacao);
				}
				else {
					recombinacaoVector = new algvector_DEP.RecombinacaoUmCorteSemRepeticao(probabilidadeRecombinacao);
				}				
				break;
			case "Dois cortes":
				if (isAlgoritmoMatriz) {
					recombinacaoMatriz = new algmatriz.RecombinacaoDoisCortes(probabilidadeRecombinacao);
				}
				else {
					recombinacaoVector = new algvector_DEP.RecombinacaoDoisCortes(probabilidadeRecombinacao);
				}
				break;
			case "Uniforme":
				if (isAlgoritmoMatriz) {
					recombinacaoMatriz = new algmatriz.RecombinacaoUniforme(probabilidadeRecombinacao);
				}
				else {
					recombinacaoVector = new algvector_DEP.RecombinacaoUniforme(probabilidadeRecombinacao);
				}
				break; 
			//--->
			case "Um corte aleatorio sem repetição":
				recombinacaoVector = new algvector_DEP.RecombinacaoUmCorteAleatorioSemRepeticao(probabilidadeRecombinacao);
				break;						
			default:
				throw new UnsupportedOperationException();					
			}
            
            //METODO MUTACAO
            switch (metodoMutacao) {
			//MATRIZ
            case "Numa linha troca 2 genes":
				mutacaoMatriz = new algmatriz.MutacaoLinhaDuasPosicoes(probabilidadeMutacao);
				break;
			case "Aleatoria Matriz":
				mutacaoMatriz = new algmatriz.MutacaoAleatoria(probabilidadeMutacao);
				break;
			//VECTOR
			case "Swap 5":
				mutacaoVector = new algvector_DEP.MutacaoSwap5(probabilidadeMutacao);
				break;
			case "Aleatoria Vector":	
				mutacaoVector = new algvector_DEP.MutacaoAleatoria(probabilidadeMutacao);
				break;
			default:
				throw new UnsupportedOperationException();
			}
            
            
            //METODO SELECCAO
            switch (metodoSeleccao) {
			//MATRIZ
            case "Roleta Matriz":
				metodoSeleccaoMatriz = new algmatriz.Roleta();
				break;
			case "Torneio c/ Pop. Elite Matriz":
				double percentagemPopulacaoElite = 0.05;
				metodoSeleccaoMatriz = new algmatriz.TorneioComPopElite(tamanhoTorneio, percentagemPopulacaoElite);
				break;
			case "Torneio Simples Matriz":
				metodoSeleccaoMatriz = new algmatriz.TorneioSimples(tamanhoTorneio);
				break;
			case "Torneio Simples Com Batota":
				metodoSeleccaoMatriz = new algmatriz.TorneioSimplesBatota(tamanhoTorneio);
				break;
			//VECTOR
			case "Roleta Vector":
				metodoSeleccaoVector = new algvector_DEP.Roleta();
				break;
			case "Torneio c/ Pop. Elite Vector":
				metodoSeleccaoVector = new algvector_DEP.TorneioComPopElite();
				break;
			case "Torneio Simples Vector":
				metodoSeleccaoVector = new algvector_DEP.TorneioSimples();
				break;
			default:
				throw new UnsupportedOperationException();
			}

            //mutacao = new MutacaoSwap5(probabilidadeMutacao);
            //converteSudoku();
            //AlgoritmoGenetico ag = new AlgoritmoGenetico(this, 1, 200, 5, 70000, new Torneio(2), new RecombinacaoUmCorteSemRepeticao(0.84), new MutacaoSwap5(0.0221111111), 40); 
            
            if (isAlgoritmoMatriz) {
                agMatriz = new algmatriz.AlgoritmoGenetico(
                		this, 					//janela sudoku
                		seed, 					
                		converteSudoku(), 		//enigma
                		tamanhoPopulacao,                 		
                		maximoGeracoes, 
                		metodoSeleccaoMatriz, 
                		recombinacaoMatriz, 
                		mutacaoMatriz, 
                		//40,						//elite
                		"");					//TODO nome fx
//            } else {
//                agVector = new algvector_DEP.AlgoritmoGenetico(                		
//                		this, 					//janela sudoku
//                		seed, 					
//                		converteSudoku(), 		//enigma
//                		tamanhoPopulacao, 
//                		maximoGeracoes, 
//                		metodoSeleccaoVector, 
//                		recombinacaoVector, 
//                		mutacaoVector 
//                		);					//elite
            }

            this.actualizaActivos(false);

            new Thread(new Runnable() {

                @Override
                public void run() {
                    if (isAlgoritmoMatriz) {
                        agMatriz.executar();
                    } else {
                        agVector.executar();
                    }
                }
            }).start();

        } catch (Exception ex) {

            JOptionPane.showMessageDialog(this, ex.getMessage() + " Introduza valores válidos!!!", "Erro de Inserção", JOptionPane.ERROR_MESSAGE);
        }    
	}//GEN-LAST:event_botaoSubmitActionPerformed

    /**
     * Metodo chamado quado ocorre o evento associado ao carregar no botao que termina
     * a aplicação
     * @param evt Evento ActionPerformed
     */
	private void botaoSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSairActionPerformed
	    System.exit(1);
	}//GEN-LAST:event_botaoSairActionPerformed

    /**
     * Metodo chamado quando é pressionado o botao que faz parar o processo de resolução do problema proposto.
     * @param evt Evento ActionPerformed
     */
	private void botaoPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPararActionPerformed
	    if (agMatriz != null || agVector != null) {
	        if (comboBoxTipoIndividuo.getSelectedItem().equals("Matriz 9x9")) {
	            agMatriz.setCancelou(true);
	        } else {
	            agVector.setCancelou(true);
	        }
	        this.actualizaActivos(true);
	
	        this.areaTextoSudoku.setText("");
	        this.sudokuStringBuffer = null;
	        this.sudokuStringBuffer = new StringBuffer();
	    }
	}//GEN-LAST:event_botaoPararActionPerformed

	private void comboBoxTipoIndividuoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTipoIndividuoActionPerformed
	
	    DefaultComboBoxModel modelRecombinacao = null;
	    DefaultComboBoxModel modelMutacao = null;
	    DefaultComboBoxModel modelSeleccao = null;
	
	    String[] itemsRecombinacao9x9 = {
	    		"Um corte aleatorio", 
	    		"Um corte em blocos de 3", 
	    		"Um corte sem repetição", 
	    		"Dois cortes", 
	    		"Uniforme"
	    		};
	    String[] itemsRecombinacaoVector = {
	    		"Um corte aleatorio sem repetição", 
	    		"Um corte sem repetição", 
	    		"Dois cortes",
	    		"Uniforme"
	    		};
	    
	    String[] itemsMutacao9x9 = {
	    		"Numa linha troca 2 genes", 
	    		"Aleatoria Matriz"
	    		};
	    String[] itemsMutacaoVector = {
	    		"Swap 5", 
	    		"Aleatoria Vector"};
	    
	    String[] itemsSeleccao9x9 = {
	    		"Torneio c/ Pop. Elite Matriz", 
	    		"Torneio Simples Matriz", 
	    		"Torneio Simples Com Batota", 
	    		"Roleta Matriz"
	    		};
	    String[] itemsSeleccaoVector = {
	    		"Torneio c/ Pop. Elite Vector", 
	    		"Torneio Simples Vector", 
	    		"Roleta Vector"
	    		};
	
	    Boolean isAlgMatix = this.comboBoxTipoIndividuo.getSelectedItem().toString().equals("Matriz 9x9");    
	    modelRecombinacao = isAlgMatix ? new DefaultComboBoxModel(itemsRecombinacao9x9) : new DefaultComboBoxModel(itemsRecombinacaoVector);
	    modelMutacao = isAlgMatix ? new DefaultComboBoxModel(itemsMutacao9x9) : new DefaultComboBoxModel(itemsMutacaoVector);
	    modelSeleccao = isAlgMatix ? new DefaultComboBoxModel(itemsSeleccao9x9) : new DefaultComboBoxModel(itemsSeleccaoVector);
	
	    this.comboBoxRecombinacao.setModel(modelRecombinacao);
	    this.comboBoxMutacao.setModel(modelMutacao);
	    this.comboBoxSeleccao.setModel(modelSeleccao); 		//TODO DEVsf novo
	}//GEN-LAST:event_comboBoxTipoIndividuoActionPerformed

	private void botaoExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExportarActionPerformed
	    JFileChooser jfc = new JFileChooser();
	    BufferedWriter bw = null;
	    try {
	        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
	            bw = new BufferedWriter(new FileWriter(jfc.getSelectedFile()));
	            bw.write(this.areaTextoSudoku.getText(), 0, this.areaTextoSudoku.getText().length());
	
	        }
	    } catch (IOException ex) {
	    } finally {
	        try {
	            if (bw != null) {
	                bw.close();
	            }
	        } catch (IOException ex) {
	            Logger.getLogger(JanelaSudoku.class.getName()).log(Level.SEVERE, null, ex);
	        }
	    }
	    this.botaoExportar.setEnabled(false);
	}//GEN-LAST:event_botaoExportarActionPerformed

	/**
	 * Metodo que serve para activar ou desactivar os componentes no formulário
	 * @param isActivo Booleno que guarda o valor true se for para activar ou false
	 * se for para desactivar
	 */
	private void actualizaActivos(boolean isActivo){
	    cxSeed.setEnabled(isActivo);
	    cxTamanhoPopulacao.setEnabled(isActivo);
	    cxTamanhoPopulacao.setEnabled(isActivo);
	    cxMaximoGeracoes.setEnabled(isActivo);
	    comboBoxSeleccao.setEnabled(isActivo);
	    cxNumIndividuos.setEnabled(isActivo);
	    comboBoxRecombinacao.setEnabled(isActivo);
	    cxProbRecombinacao.setEnabled(isActivo);
	    comboBoxMutacao.setEnabled(isActivo);
	    cxProbMutacao.setEnabled(isActivo);
	    botaoSubmit.setEnabled(isActivo);
	    botaoAbrirFicheiro.setEnabled(isActivo);
	    //comboBoxTipoIndividuo.setEnabled(isActivo);
	}
	/**
	 * Metodo que serve para ler o problema de um ficheiro de texto. O resultado da
	 * leitura vai ser attribuido a uma variavel do tipo StringBuffer.
	 * @param f ponteiro para o ficheiro que vai ser lido.
	 */
	private void abrirFicheiro(File f){
	        
	    
	    FileInputStream fis = null;
	    //garante que a StringBuffer nao acumula propostas de problemas
	    sudokuStringBuffer = new StringBuffer();
	
	    try{
	        BufferedReader br = new BufferedReader(new FileReader(f));
	        String linha;
	        
	        while((linha = br.readLine()) != null){
	            sudokuStringBuffer.append(linha+"\n");
	        }
	    }
	    catch(Exception ex){
	        //JOptionPane.showMessageDialog(this, Erros.getError(6));
	        JOptionPane.showMessageDialog(this, ex.getMessage());
	    }
	        
	}
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaSudoku().setVisible(true);
            }
        });
    }
    
    /**
     * Metodo que serve para actualizar o conteudo da JTextArea que mostra a
     * evoluçao da resolução do problema
     * @param sudokuString String que guarda o valor que se pretende que seja 
     * impresso na JTextArea
     */
    @Override
    public void imprimePuzzleAtual(String texto) {
        this.areaTextoSudoku.setText(texto);
    }
    
    /**
     * Metodo que serve para converter a proposta de problema, que se encontra
     * guardada numa StringBuffer
     * @return Array bidimenssional de inteiros (matriz) contendo a proposta de problema
     */
    private int[][] converteSudoku(){
        
        int[][] matrizAux = new int[AlgoritmoGenetico.DIMENSAO][AlgoritmoGenetico.DIMENSAO];
        LinkedList<Integer> listaInteiros = new LinkedList<Integer>();
        String aux;
        for (int i = 0; i < sudokuStringBuffer.toString().length(); i++) {
            if(sudokuStringBuffer.charAt(i) == ' '){
                listaInteiros.add(0);
            }
            else{
                aux = sudokuStringBuffer.substring(i, i + 1);
                try{
                    listaInteiros.add(Integer.parseInt(aux));
                }
                catch(Exception ex){
                    //System.out.println(ex.getMessage());
                }
            }
            
        }
        Iterator it = listaInteiros.iterator();
        int k = 0;
        for (int i = 0; i < AlgoritmoGenetico.DIMENSAO; i++) {
            for (int j = 0; j < AlgoritmoGenetico.DIMENSAO; j++) {
                matrizAux[i][j] = listaInteiros.get(k++);
            }
        }
        
        return matrizAux;
    }
    
    /**
     * Metodo que serve para informar que o problema foi resolvido
     */
    public void imprimeGreatSuccess(Boolean sucesso, String nomeFx, int geracao, double fitnessMelhorIndividuoRun, long seed, int tamanhoPopulacao, double probabilidadeRecombinacao, double probabilidadeMutacao){
    	this.actualizaActivos(true);
        this.botaoExportar.setEnabled(true);
        JOptionPane.showMessageDialog(this, "Great Success!!!\nProblema Solucionado", "Parabéns", JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Metodo que serve para actualizar o conteudo das caixas de texto que mostram
     * a informação relativa á resolução do problema.
     * @param geracao Numero da geração actual.
     * @param melhorFitnessGeracao Fitness do melhor indivíduo da geração actual.
     * @param melhorFitnessRun Fitness do indivíduo do Run
     */
    @Override
    public void imprimeInfoFitness(String nomeFx, int geracao, double melhorFitnessGeracao, double melhorFitnessRun){
        this.cxNumeroGeração.setText(Integer.toString(geracao));
        this.cxMelhorFitnessGeracao.setText(Double.toString(melhorFitnessGeracao));
        this.cxMelhorFitnessRun.setText(Double.toString(melhorFitnessRun));
    }
    
    /**
     * Metodo auxiliar que preenche as caixas de texto com os parametros necessários
     * para a resolução do problema.
     */
    private void preencherValoresPorOmissao(){
        this.cxSeed.setText("10");
        this.cxTamanhoPopulacao.setText("200");
        this.cxMaximoGeracoes.setText("70000");
        this.cxNumIndividuos.setText("4");
        this.cxProbRecombinacao.setText("0.70");
        this.cxProbMutacao.setText("0.03234567");
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaTextoSudoku;
    private javax.swing.JButton botaoAbrirFicheiro;
    private javax.swing.JButton botaoExportar;
    private javax.swing.JButton botaoParar;
    private javax.swing.JButton botaoSair;
    private javax.swing.JButton botaoSubmit;
    private javax.swing.JComboBox comboBoxMutacao;
    private javax.swing.JComboBox comboBoxRecombinacao;
    private javax.swing.JComboBox comboBoxSeleccao;
    private javax.swing.JComboBox comboBoxTipoIndividuo;
    private javax.swing.JTextField cxMaximoGeracoes;
    private javax.swing.JTextField cxMelhorFitnessGeracao;
    private javax.swing.JTextField cxMelhorFitnessRun;
    private javax.swing.JTextField cxNumIndividuos;
    private javax.swing.JTextField cxNumeroGeração;
    private javax.swing.JTextField cxProbMutacao;
    private javax.swing.JTextField cxProbRecombinacao;
    private javax.swing.JTextField cxSeed;
    private javax.swing.JTextField cxTamanhoPopulacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

}
